name: Reusable python tests workflow
on:
  workflow_call:
    inputs:
      python_versions:
        description: Python versions to use
        type: string
        required: true
      working_directory:
        description: Directory that must be run against the linters
        type: string
        required: true
      requirements_path:
        description: Path to the requirements.txt file
        type: string
        required: true
      packages_path:
        description: Path to the packages.txt file
        type: string
        required: false


      custom_command:
        description: String of custom command to run
        type: string
        required: false
      django_settings_module:
        description: Path to the django settings file
        type: string
        required: false

      check_migrations:
        description: Check if migrations are valid. Requis django_settings_module to be set.
        type: boolean
        required: false
        default: false


      use_postgres:
        description: Use postgres service
        default: false
        type: boolean
        required: false
      use_elastic_search:
        description: Use elastic_search service
        default: false
        type: boolean
        required: false
      use_memcached:
        description: Use memcached service
        default: false
        type: boolean
        required: false
      use_redis:
        description: Use redis service
        default: false
        type: boolean
        required: false


      use_tox:
        description: Use tox suite
        default: false
        type: boolean
        required: false
      use_unittest:
        description: Use unittest suite
        default: false
        type: boolean
        required: false
      use_pytest:
        description: Use pytest suite
        default: false
        type: boolean
        required: false

      postgres_db:
        description: Postgres service db. Requires use_postgres to be true
        type: string
        required: false
        default: db
      postgres_user:
        description: Postgres service user. Requires use_postgres to be true
        type: string
        required: false
        default: user
      postgres_password:
        description: Postgres service password. Requires use_postgres to be true
        type: string
        required: false
        default: password

jobs:
    tests:
        name: Run python tests
        runs-on: ubuntu-latest
        timeout-minutes: 20
        strategy:
          matrix:
            python_version: ${{ fromJson(inputs.python_versions) }}
        steps:
            - uses: actions/checkout@v3

            - name: Install apt packages
              if: ${{ inputs.packages_path }}
              run: |
                sudo apt update
                cat ${{ inputs.packages_path }} | sudo xargs apt-get install -y

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python_version }}

            - name: Create postgres docker-compose file
              if: ${{ inputs.use_postgres }}
              run: |
                echo "version: '3.7'" > postgres.yml
                echo "services:" >> postgres.yml
                echo "  postgres:" >> postgres.yml
                echo "    image: library/postgres:10.14-alpine" >> postgres.yml
                echo "    environment:" >> postgres.yml
                echo "      POSTGRES_DB: ${{ inputs.postgres_db }}" >> postgres.yml
                echo "      POSTGRES_USER: ${{ inputs.postgres_user }}" >> postgres.yml
                echo "      POSTGRES_PASSWORD: ${{ inputs.postgres_password }}" >> postgres.yml
                echo "    ports:" >> postgres.yml
                echo "      - 5432:5432" >> postgres.yml
                echo "    healthcheck:" >> postgres.yml
                echo "      test: pg_isready" >> postgres.yml
                echo "      interval: 10s" >> postgres.yml
                echo "      timeout: 5s" >> postgres.yml
                echo "      retries: 5" >> postgres.yml
              shell:
                bash

            - name: Create elasticsearch docker-compose file
              if: ${{ inputs.use_elastic_search }}
              run: |
                echo "version: '3.7'" > elastic_search.yml
                echo "services:" >> elastic_search.yml
                echo "  elastic_search:" >> elastic_search.yml
                echo "    image: elasticsearch:7.10.1" >> elastic_search.yml
                echo "    environment:" >> elastic_search.yml
                echo "      ES_JAVA_OPTS: -Xms1g -Xmx1g" >> elastic_search.yml
                echo "      discovery.type: single-node" >> elastic_search.yml
                echo "    ports:" >> elastic_search.yml
                echo "      - 59200:9200" >> elastic_search.yml
                echo "    healthcheck:" >> elastic_search.yml
                echo "      test: curl -X GET 'localhost:9200/_cluster/health?wait_for_status=yellow&timeout=180s&pretty'" >> elastic_search.yml
                echo "      interval: 10s" >> elastic_search.yml
                echo "      timeout: 180s" >> elastic_search.yml
                echo "      retries: 5" >> elastic_search.yml
              shell:
                bash

            - name: Create memcached docker-compose file
              if: ${{ inputs.use_memcached }}
              run: |
                echo "version: '3.7'" > memcached.yml
                echo "services:" >> memcached.yml
                echo "  memcached:" >> memcached.yml
                echo "    image: memcached:1.6.9-alpine" >> memcached.yml
                echo "    ports:" >> memcached.yml
                echo "      - 11211:11211" >> memcached.yml
              shell:
                bash

            - name: Create redis docker-compose file
              if: ${{ inputs.use_redis }}
              run: |
                echo "version: '3.7'" > redis.yml
                echo "services:" >> redis.yml
                echo "  redis:" >> redis.yml
                echo "    image: library/redis:5.0.9-alpine" >> redis.yml
                echo "    ports:" >> redis.yml
                echo "      - 6379:6379" >> redis.yml
              shell:
                bash

            - name: Execute docker-compose up
              if: ${{ inputs.use_postgres }} || ${{ inputs.use_elastic_search }} || ${{ inputs.use_memcached }} ||  ${{ inputs.use_redis }}
              run: |
                CLI=docker-compose
                if [[ ${{ inputs.use_postgres }} != 'false' ]]; then
                  CLI="${CLI} -f postgres.yml"
                fi
                if [[ ${{ inputs.use_elastic_search }} != 'false' ]]; then
                  CLI="${CLI} -f elastic_search.yml"
                fi
                if [[ ${{ inputs.use_memcached }} != 'false' ]]; then
                  CLI="${CLI} -f memcached.yml"
                fi
                if [[ ${{ inputs.use_redis }} != 'false' ]]; then
                  CLI="${CLI} -f redis.yml"
                fi

                # add other containers here
                echo "Running: ${CLI} up -d"
                $CLI up -d
                $CLI ps
              shell:
                bash


            - name: Create dev-requirements.txt
              run: |
                echo > dev-requirements.txt
                if [[ ${{ inputs.use_tox }} != 'false' ]]; then
                  echo "tox>=3.0.0" >> dev-requirements.txt
                fi
                if [[ ${{ inputs.use_pytest }} != 'false' ]]; then
                  echo "pytest>=7.0.0" >> dev-requirements.txt
                fi
              shell: bash


            - uses: syphar/restore-virtualenv@v1
              id: cache-virtualenv
              with:
                requirement_files: |
                  ${{ inputs.requirements_path }}
                  dev-requirements.txt

            - uses: syphar/restore-pip-download-cache@v1
              if: steps.cache-virtualenv.outputs.cache-hit != 'true'

            - run: |
                pip install -r ${{ inputs.requirements_path }}
                pip install -r dev-requirements.txt
              if: steps.cache-virtualenv.outputs.cache-hit != 'true'


            - name: Custom command
              if: ${{ inputs.custom_command }}
              run: |
                  COMMAND=${{ inputs.custom_command }}
                  echo "Running command: $COMMAND"
                  $COMMAND
              shell: bash

            - name: Check migrations
              if : ${{ inputs.check_migrations }}
              run: |
                django-admin makemigrations --dry-run >/dev/null
              working-directory: ${{ inputs.working_directory }}
              env:
                DJANGO_SETTINGS_MODULE: ${{ inputs.django_settings_module }}
                PYTHONPATH: $GITHUB_WORKSPACE/${{ inputs.working_directory }}:$PYTHONPATH

            - name: Run tox tests
              if: ${{ inputs.use_tox }}
              run: |
                tox
              working-directory: ${{ inputs.working_directory }}

            - name: Run unittest
              if: ${{ inputs.use_unittest }}
              run: |
                python -m unittest discover
              working-directory: ${{ inputs.working_directory }}

            - name: Run pytest
              if: ${{ inputs.use_pytest }}
              run: |
                  python -m pytest
              working-directory: ${{ inputs.working_directory }}

