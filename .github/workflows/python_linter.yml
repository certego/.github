name: Reusable python linter workflow
on:
  workflow_call:
    inputs:
      python_versions:
        description: Python versions to use
        type: string
        required: true
      working_directory:
        description: Directory that must be run against the linters
        type: string
        required: true

      use_black:
        description: Use black formatter
        default: true
        type: boolean
        required: false
      use_isort:
        description: Use isort formatter
        default: true
        type: boolean
        required: false
      use_flake8:
        description: Use flake8 linter
        default: true
        type: boolean
        required: false
      use_pylint:
        description: Use pylint linter
        default: true
        type: boolean
        required: false
      use_bandit:
        description: Use bandit linter
        default: true
        type: boolean
        required: false
      bandit_config_file:
        description: Path to the bandit config file from the working dir
        type: string
        required: false
        default: .bandit.yaml

jobs:
    linters:
        timeout-minutes: 5
        runs-on: ubuntu-latest
        strategy:
          matrix:
            python_version: ${{ fromJson(inputs.python_versions) }}
        env:
          LINTER_REQUIREMENTS_PATH: linter-${{ matrix.python_version }}-requirements.txt
        steps:
            - uses: actions/checkout@v3

            # not the best solution because i do not think that dependabot supports this
            - name: Write requirements to file for caching
              run: |
                echo > ${{ env.LINTER_REQUIREMENTS_PATH }}
                if [[ ${{ inputs.use_black}} ]]; then
                  echo "black==22.3.0" >> ${{ env.LINTER_REQUIREMENTS_PATH }}
                fi
                if [[ ${{ inputs.use_isort}} ]]; then
                  echo "isort==5.10.1" >> ${{ env.LINTER_REQUIREMENTS_PATH }}
                fi
                if [[ ${{ inputs.use_flake8}} ]]; then
                  echo "flake8==4.0.1" >> ${{ env.LINTER_REQUIREMENTS_PATH }}
                fi
                if [[ ${{ inputs.use_pylint}} ]]; then
                  echo "pylint==2.14.3" >> ${{ env.LINTER_REQUIREMENTS_PATH }}
                fi
                if [[ ${{ inputs.use_bandit}} ]]; then
                  echo "bandit==1.7.4" >> ${{ env.LINTER_REQUIREMENTS_PATH }}
                fi


            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                python-version: ${{ matrix.python_version }}

            - uses: syphar/restore-virtualenv@v1
              id: cache-virtualenv
              with:
                requirement_files: ${{ env.LINTER_REQUIREMENTS_PATH }}

            - uses: syphar/restore-pip-download-cache@v1
              if: steps.cache-virtualenv.outputs.cache-hit != 'true'

            - run: pip install -r ${{ env.LINTER_REQUIREMENTS_PATH }}
              if: steps.cache-virtualenv.outputs.cache-hit != 'true'


            - name: Black formatter
              if: ${{ inputs.use_black }}
              run:
                black . --check --diff
              working-directory: ${{ inputs.working_directory }}

            - name: Lint with flake8 (PEP8 enforcer + linter)
              if: ${{ inputs.use_flake8 }}
              run: |
                flake8 .  --show-source
              working-directory: ${{ inputs.working_directory }}

            - name: isort
              if: ${{ inputs.use_isort }}
              run: |
                isort . --profile black --filter-files --check-only --diff
              working-directory: ${{ inputs.working_directory }}

            - name: pylint
              if: ${{ inputs.use_pylint }}
              run: |
                  pylint .
              working-directory: ${{ inputs.working_directory }}

            - name: bandit
              if: ${{ inputs.use_bandit }}
              run: |
                  bandit */ -r -c ${{ inputs.bandit_config_file }}
              working-directory: ${{ inputs.working_directory }}